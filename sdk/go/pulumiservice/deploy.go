// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package pulumiservice

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Runs a deployment on a stack and waits until it returns a final status (succeeded/failed).
func Deploy(ctx *pulumi.Context, args *DeployArgs, opts ...pulumi.InvokeOption) (*DeployResult, error) {
	var rv DeployResult
	err := ctx.Invoke("pulumiservice:index:Deploy", args.Defaults(), &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type DeployArgs struct {
	DependsOn       []DeployResponse `pulumi:"dependsOn"`
	InheritSettings *bool            `pulumi:"inheritSettings"`
	Operation       *string          `pulumi:"operation"`
	Organization    string           `pulumi:"organization"`
	Project         string           `pulumi:"project"`
	Stack           string           `pulumi:"stack"`
}

// Defaults sets the appropriate defaults for DeployArgs
func (val *DeployArgs) Defaults() *DeployArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.InheritSettings == nil {
		inheritSettings_ := true
		tmp.InheritSettings = &inheritSettings_
	}
	if tmp.Operation == nil {
		operation_ := "update"
		tmp.Operation = &operation_
	}
	return &tmp
}

type DeployResult struct {
	ConsoleUrl string  `pulumi:"consoleUrl"`
	Id         string  `pulumi:"id"`
	Status     string  `pulumi:"status"`
	Version    float64 `pulumi:"version"`
}

func DeployOutput(ctx *pulumi.Context, args DeployOutputArgs, opts ...pulumi.InvokeOption) DeployResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (DeployResult, error) {
			args := v.(DeployArgs)
			r, err := Deploy(ctx, &args, opts...)
			var s DeployResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(DeployResultOutput)
}

type DeployOutputArgs struct {
	DependsOn       DeployResponseArrayInput `pulumi:"dependsOn"`
	InheritSettings pulumi.BoolPtrInput      `pulumi:"inheritSettings"`
	Operation       pulumi.StringPtrInput    `pulumi:"operation"`
	Organization    pulumi.StringInput       `pulumi:"organization"`
	Project         pulumi.StringInput       `pulumi:"project"`
	Stack           pulumi.StringInput       `pulumi:"stack"`
}

func (DeployOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeployArgs)(nil)).Elem()
}

type DeployResultOutput struct{ *pulumi.OutputState }

func (DeployResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeployResult)(nil)).Elem()
}

func (o DeployResultOutput) ToDeployResultOutput() DeployResultOutput {
	return o
}

func (o DeployResultOutput) ToDeployResultOutputWithContext(ctx context.Context) DeployResultOutput {
	return o
}

func (o DeployResultOutput) ConsoleUrl() pulumi.StringOutput {
	return o.ApplyT(func(v DeployResult) string { return v.ConsoleUrl }).(pulumi.StringOutput)
}

func (o DeployResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v DeployResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o DeployResultOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v DeployResult) string { return v.Status }).(pulumi.StringOutput)
}

func (o DeployResultOutput) Version() pulumi.Float64Output {
	return o.ApplyT(func(v DeployResult) float64 { return v.Version }).(pulumi.Float64Output)
}

func init() {
	pulumi.RegisterOutputType(DeployResultOutput{})
}
