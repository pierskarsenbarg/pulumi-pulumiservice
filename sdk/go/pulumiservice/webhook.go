// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package pulumiservice

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Pulumi Webhooks allow you to notify external services of events happening within your Pulumi organization or stack. For example, you can trigger a notification whenever a stack is updated. Whenever an event occurs, Pulumi will send an HTTP POST request to all registered webhooks. The webhook can then be used to emit some notification, start running integration tests, or even update additional stacks.
//
// ### Import
//
// Pulumi webhooks can be imported using the `id`, which for webhooks is `{org}/{project}/{stack}/{webhook-name}` e.g.,
//
// ```sh
//
//	$ pulumi import pulumiservice:index:Webhook my_webhook my-org/my-project/my-stack/4b0d0671
//
// ```
type Webhook struct {
	pulumi.CustomResourceState

	// Indicates whether this webhook is enabled or not.
	Active pulumi.BoolPtrOutput `pulumi:"active"`
	// The friendly name displayed in the Pulumi Cloud.
	DisplayName pulumi.StringPtrOutput `pulumi:"displayName"`
	// Optional set of filters to apply to the webhook. See [webhook docs](https://www.pulumi.com/docs/intro/pulumi-service/webhooks/#filters) for more information.
	Filters WebhookFiltersArrayOutput `pulumi:"filters"`
	// Format of the webhook payload. Can be either `raw` or `slack`. Defaults to `raw`.
	Format WebhookFormatPtrOutput `pulumi:"format"`
	// Webhook identifier generated by Pulumi Cloud.
	Name pulumi.StringPtrOutput `pulumi:"name"`
	// Name of the organization.
	OrganizationName pulumi.StringPtrOutput `pulumi:"organizationName"`
	// URL to send request to.
	PayloadUrl pulumi.StringPtrOutput `pulumi:"payloadUrl"`
	// Name of the project. Only specified if this is a stack webhook.
	ProjectName pulumi.StringPtrOutput `pulumi:"projectName"`
	// Optional. secret used as the HMAC key. See [webhook docs](https://www.pulumi.com/docs/intro/pulumi-service/webhooks/#headers) for more information.
	Secret pulumi.StringPtrOutput `pulumi:"secret"`
	// Name of the stack. Only specified if this is a stack webhook.
	StackName pulumi.StringPtrOutput `pulumi:"stackName"`
}

// NewWebhook registers a new resource with the given unique name, arguments, and options.
func NewWebhook(ctx *pulumi.Context,
	name string, args *WebhookArgs, opts ...pulumi.ResourceOption) (*Webhook, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Active == nil {
		return nil, errors.New("invalid value for required argument 'Active'")
	}
	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	if args.OrganizationName == nil {
		return nil, errors.New("invalid value for required argument 'OrganizationName'")
	}
	if args.PayloadUrl == nil {
		return nil, errors.New("invalid value for required argument 'PayloadUrl'")
	}
	if args.Format == nil {
		args.Format = WebhookFormat("raw")
	}
	if args.Secret != nil {
		args.Secret = pulumi.ToSecret(args.Secret).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"secret",
	})
	opts = append(opts, secrets)
	var resource Webhook
	err := ctx.RegisterResource("pulumiservice:index:Webhook", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWebhook gets an existing Webhook resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWebhook(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WebhookState, opts ...pulumi.ResourceOption) (*Webhook, error) {
	var resource Webhook
	err := ctx.ReadResource("pulumiservice:index:Webhook", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Webhook resources.
type webhookState struct {
}

type WebhookState struct {
}

func (WebhookState) ElementType() reflect.Type {
	return reflect.TypeOf((*webhookState)(nil)).Elem()
}

type webhookArgs struct {
	// Indicates whether this webhook is enabled or not.
	Active bool `pulumi:"active"`
	// The friendly name displayed in the Pulumi Cloud.
	DisplayName string `pulumi:"displayName"`
	// Optional set of filters to apply to the webhook. See [webhook docs](https://www.pulumi.com/docs/intro/pulumi-service/webhooks/#filters) for more information.
	Filters []WebhookFilters `pulumi:"filters"`
	// Format of the webhook payload. Can be either `raw` or `slack`. Defaults to `raw`.
	Format *WebhookFormat `pulumi:"format"`
	// Name of the organization.
	OrganizationName string `pulumi:"organizationName"`
	// URL to send request to.
	PayloadUrl string `pulumi:"payloadUrl"`
	// Name of the project. Only needed if this is a stack webhook.
	ProjectName *string `pulumi:"projectName"`
	// Optional. secret used as the HMAC key. See [webhook docs](https://www.pulumi.com/docs/intro/pulumi-service/webhooks/#headers) for more information.
	Secret *string `pulumi:"secret"`
	// Name of the stack. Only needed if this is a stack webhook.
	StackName *string `pulumi:"stackName"`
}

// The set of arguments for constructing a Webhook resource.
type WebhookArgs struct {
	// Indicates whether this webhook is enabled or not.
	Active pulumi.BoolInput
	// The friendly name displayed in the Pulumi Cloud.
	DisplayName pulumi.StringInput
	// Optional set of filters to apply to the webhook. See [webhook docs](https://www.pulumi.com/docs/intro/pulumi-service/webhooks/#filters) for more information.
	Filters WebhookFiltersArrayInput
	// Format of the webhook payload. Can be either `raw` or `slack`. Defaults to `raw`.
	Format WebhookFormatPtrInput
	// Name of the organization.
	OrganizationName pulumi.StringInput
	// URL to send request to.
	PayloadUrl pulumi.StringInput
	// Name of the project. Only needed if this is a stack webhook.
	ProjectName pulumi.StringPtrInput
	// Optional. secret used as the HMAC key. See [webhook docs](https://www.pulumi.com/docs/intro/pulumi-service/webhooks/#headers) for more information.
	Secret pulumi.StringPtrInput
	// Name of the stack. Only needed if this is a stack webhook.
	StackName pulumi.StringPtrInput
}

func (WebhookArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*webhookArgs)(nil)).Elem()
}

type WebhookInput interface {
	pulumi.Input

	ToWebhookOutput() WebhookOutput
	ToWebhookOutputWithContext(ctx context.Context) WebhookOutput
}

func (*Webhook) ElementType() reflect.Type {
	return reflect.TypeOf((**Webhook)(nil)).Elem()
}

func (i *Webhook) ToWebhookOutput() WebhookOutput {
	return i.ToWebhookOutputWithContext(context.Background())
}

func (i *Webhook) ToWebhookOutputWithContext(ctx context.Context) WebhookOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebhookOutput)
}

// WebhookArrayInput is an input type that accepts WebhookArray and WebhookArrayOutput values.
// You can construct a concrete instance of `WebhookArrayInput` via:
//
//	WebhookArray{ WebhookArgs{...} }
type WebhookArrayInput interface {
	pulumi.Input

	ToWebhookArrayOutput() WebhookArrayOutput
	ToWebhookArrayOutputWithContext(context.Context) WebhookArrayOutput
}

type WebhookArray []WebhookInput

func (WebhookArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Webhook)(nil)).Elem()
}

func (i WebhookArray) ToWebhookArrayOutput() WebhookArrayOutput {
	return i.ToWebhookArrayOutputWithContext(context.Background())
}

func (i WebhookArray) ToWebhookArrayOutputWithContext(ctx context.Context) WebhookArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebhookArrayOutput)
}

// WebhookMapInput is an input type that accepts WebhookMap and WebhookMapOutput values.
// You can construct a concrete instance of `WebhookMapInput` via:
//
//	WebhookMap{ "key": WebhookArgs{...} }
type WebhookMapInput interface {
	pulumi.Input

	ToWebhookMapOutput() WebhookMapOutput
	ToWebhookMapOutputWithContext(context.Context) WebhookMapOutput
}

type WebhookMap map[string]WebhookInput

func (WebhookMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Webhook)(nil)).Elem()
}

func (i WebhookMap) ToWebhookMapOutput() WebhookMapOutput {
	return i.ToWebhookMapOutputWithContext(context.Background())
}

func (i WebhookMap) ToWebhookMapOutputWithContext(ctx context.Context) WebhookMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebhookMapOutput)
}

type WebhookOutput struct{ *pulumi.OutputState }

func (WebhookOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Webhook)(nil)).Elem()
}

func (o WebhookOutput) ToWebhookOutput() WebhookOutput {
	return o
}

func (o WebhookOutput) ToWebhookOutputWithContext(ctx context.Context) WebhookOutput {
	return o
}

// Indicates whether this webhook is enabled or not.
func (o WebhookOutput) Active() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Webhook) pulumi.BoolPtrOutput { return v.Active }).(pulumi.BoolPtrOutput)
}

// The friendly name displayed in the Pulumi Cloud.
func (o WebhookOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Webhook) pulumi.StringPtrOutput { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// Optional set of filters to apply to the webhook. See [webhook docs](https://www.pulumi.com/docs/intro/pulumi-service/webhooks/#filters) for more information.
func (o WebhookOutput) Filters() WebhookFiltersArrayOutput {
	return o.ApplyT(func(v *Webhook) WebhookFiltersArrayOutput { return v.Filters }).(WebhookFiltersArrayOutput)
}

// Format of the webhook payload. Can be either `raw` or `slack`. Defaults to `raw`.
func (o WebhookOutput) Format() WebhookFormatPtrOutput {
	return o.ApplyT(func(v *Webhook) WebhookFormatPtrOutput { return v.Format }).(WebhookFormatPtrOutput)
}

// Webhook identifier generated by Pulumi Cloud.
func (o WebhookOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Webhook) pulumi.StringPtrOutput { return v.Name }).(pulumi.StringPtrOutput)
}

// Name of the organization.
func (o WebhookOutput) OrganizationName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Webhook) pulumi.StringPtrOutput { return v.OrganizationName }).(pulumi.StringPtrOutput)
}

// URL to send request to.
func (o WebhookOutput) PayloadUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Webhook) pulumi.StringPtrOutput { return v.PayloadUrl }).(pulumi.StringPtrOutput)
}

// Name of the project. Only specified if this is a stack webhook.
func (o WebhookOutput) ProjectName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Webhook) pulumi.StringPtrOutput { return v.ProjectName }).(pulumi.StringPtrOutput)
}

// Optional. secret used as the HMAC key. See [webhook docs](https://www.pulumi.com/docs/intro/pulumi-service/webhooks/#headers) for more information.
func (o WebhookOutput) Secret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Webhook) pulumi.StringPtrOutput { return v.Secret }).(pulumi.StringPtrOutput)
}

// Name of the stack. Only specified if this is a stack webhook.
func (o WebhookOutput) StackName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Webhook) pulumi.StringPtrOutput { return v.StackName }).(pulumi.StringPtrOutput)
}

type WebhookArrayOutput struct{ *pulumi.OutputState }

func (WebhookArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Webhook)(nil)).Elem()
}

func (o WebhookArrayOutput) ToWebhookArrayOutput() WebhookArrayOutput {
	return o
}

func (o WebhookArrayOutput) ToWebhookArrayOutputWithContext(ctx context.Context) WebhookArrayOutput {
	return o
}

func (o WebhookArrayOutput) Index(i pulumi.IntInput) WebhookOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Webhook {
		return vs[0].([]*Webhook)[vs[1].(int)]
	}).(WebhookOutput)
}

type WebhookMapOutput struct{ *pulumi.OutputState }

func (WebhookMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Webhook)(nil)).Elem()
}

func (o WebhookMapOutput) ToWebhookMapOutput() WebhookMapOutput {
	return o
}

func (o WebhookMapOutput) ToWebhookMapOutputWithContext(ctx context.Context) WebhookMapOutput {
	return o
}

func (o WebhookMapOutput) MapIndex(k pulumi.StringInput) WebhookOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Webhook {
		return vs[0].(map[string]*Webhook)[vs[1].(string)]
	}).(WebhookOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WebhookInput)(nil)).Elem(), &Webhook{})
	pulumi.RegisterInputType(reflect.TypeOf((*WebhookArrayInput)(nil)).Elem(), WebhookArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WebhookMapInput)(nil)).Elem(), WebhookMap{})
	pulumi.RegisterOutputType(WebhookOutput{})
	pulumi.RegisterOutputType(WebhookArrayOutput{})
	pulumi.RegisterOutputType(WebhookMapOutput{})
}
