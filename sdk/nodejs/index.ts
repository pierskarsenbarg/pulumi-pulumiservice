// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export * from "./accessToken";
export * from "./provider";
export * from "./stackTag";
export * from "./team";
export * from "./webhook";

// Export sub-modules:
import * as config from "./config";

export {
    config,
};

// Import resources to register:
import { AccessToken } from "./accessToken";
import { StackTag } from "./stackTag";
import { Team } from "./team";
import { Webhook } from "./webhook";

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "pulumiservice:index:AccessToken":
                return new AccessToken(name, <any>undefined, { urn })
            case "pulumiservice:index:StackTag":
                return new StackTag(name, <any>undefined, { urn })
            case "pulumiservice:index:Team":
                return new Team(name, <any>undefined, { urn })
            case "pulumiservice:index:Webhook":
                return new Webhook(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("pulumiservice", "index", _module)

import { Provider } from "./provider";

pulumi.runtime.registerResourcePackage("pulumiservice", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:pulumiservice") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
