// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as enums from "./types/enums";
import * as utilities from "./utilities";

/**
 * A deployment deploys a stack. Deployments will always have changes.
 */
export class Deployment extends pulumi.CustomResource {
    /**
     * Get an existing Deployment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Deployment {
        return new Deployment(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'pulumiservice:index:Deployment';

    /**
     * Returns true if the given object is an instance of Deployment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Deployment {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Deployment.__pulumiType;
    }

    /**
     * The outputs of the deployed stack.
     */
    public /*out*/ readonly outputs!: pulumi.Output<{[key: string]: any}>;
    /**
     * The fully-qualified name of the stack to deploy.
     */
    public readonly stack!: pulumi.Output<string>;
    /**
     * The version of the deployed stack.
     */
    public /*out*/ readonly version!: pulumi.Output<number>;

    /**
     * Create a Deployment resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DeploymentArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.stack === undefined) && !opts.urn) {
                throw new Error("Missing required property 'stack'");
            }
            resourceInputs["config"] = args ? args.config : undefined;
            resourceInputs["settings"] = args ? (args.settings ? pulumi.output(args.settings).apply(inputs.stackDeploymentSettingsArgsProvideDefaults) : undefined) : undefined;
            resourceInputs["stack"] = args ? args.stack : undefined;
            resourceInputs["outputs"] = undefined /*out*/;
            resourceInputs["version"] = undefined /*out*/;
        } else {
            resourceInputs["outputs"] = undefined /*out*/;
            resourceInputs["stack"] = undefined /*out*/;
            resourceInputs["version"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Deployment.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a Deployment resource.
 */
export interface DeploymentArgs {
    /**
     * The stack configuration to use for the deployment.
     */
    config?: pulumi.Input<{[key: string]: any}>;
    /**
     * The settings to use for the deployment.
     */
    settings?: pulumi.Input<inputs.StackDeploymentSettingsArgs>;
    /**
     * The fully-qualified name of the stack to deploy.
     */
    stack: pulumi.Input<string>;
}
