// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.pulumiservice.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class DeploymentSettingsGitAuthSSHAuth {
    /**
     * @return Optional password for SSH authentication.
     * 
     */
    private @Nullable String password;
    /**
     * @return SSH private key.
     * 
     */
    private String sshPrivateKey;

    private DeploymentSettingsGitAuthSSHAuth() {}
    /**
     * @return Optional password for SSH authentication.
     * 
     */
    public Optional<String> password() {
        return Optional.ofNullable(this.password);
    }
    /**
     * @return SSH private key.
     * 
     */
    public String sshPrivateKey() {
        return this.sshPrivateKey;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DeploymentSettingsGitAuthSSHAuth defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String password;
        private String sshPrivateKey;
        public Builder() {}
        public Builder(DeploymentSettingsGitAuthSSHAuth defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.password = defaults.password;
    	      this.sshPrivateKey = defaults.sshPrivateKey;
        }

        @CustomType.Setter
        public Builder password(@Nullable String password) {
            this.password = password;
            return this;
        }
        @CustomType.Setter
        public Builder sshPrivateKey(String sshPrivateKey) {
            this.sshPrivateKey = Objects.requireNonNull(sshPrivateKey);
            return this;
        }
        public DeploymentSettingsGitAuthSSHAuth build() {
            final var o = new DeploymentSettingsGitAuthSSHAuth();
            o.password = password;
            o.sshPrivateKey = sshPrivateKey;
            return o;
        }
    }
}
