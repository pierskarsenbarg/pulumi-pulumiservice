// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.pulumiservice.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.pulumiservice.inputs.DeploymentSettingsExecutorContextArgs;
import com.pulumi.pulumiservice.inputs.DeploymentSettingsGithubArgs;
import com.pulumi.pulumiservice.inputs.DeploymentSettingsOperationContextArgs;
import com.pulumi.pulumiservice.inputs.DeploymentSettingsSourceContextArgs;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Deployment settings used for a stack
 * 
 */
public final class StackDeploymentSettingsArgs extends com.pulumi.resources.ResourceArgs {

    public static final StackDeploymentSettingsArgs Empty = new StackDeploymentSettingsArgs();

    /**
     * Settings related to the deployment executor.
     * 
     */
    @Import(name="executorContext")
    private @Nullable Output<DeploymentSettingsExecutorContextArgs> executorContext;

    /**
     * @return Settings related to the deployment executor.
     * 
     */
    public Optional<Output<DeploymentSettingsExecutorContextArgs>> executorContext() {
        return Optional.ofNullable(this.executorContext);
    }

    /**
     * GitHub settings for the deployment.
     * 
     */
    @Import(name="github")
    private @Nullable Output<DeploymentSettingsGithubArgs> github;

    /**
     * @return GitHub settings for the deployment.
     * 
     */
    public Optional<Output<DeploymentSettingsGithubArgs>> github() {
        return Optional.ofNullable(this.github);
    }

    /**
     * Settings related to the Pulumi operation environment during the deployment.
     * 
     */
    @Import(name="operationContext")
    private @Nullable Output<DeploymentSettingsOperationContextArgs> operationContext;

    /**
     * @return Settings related to the Pulumi operation environment during the deployment.
     * 
     */
    public Optional<Output<DeploymentSettingsOperationContextArgs>> operationContext() {
        return Optional.ofNullable(this.operationContext);
    }

    /**
     * Settings related to the source of the deployment.
     * 
     */
    @Import(name="sourceContext")
    private @Nullable Output<DeploymentSettingsSourceContextArgs> sourceContext;

    /**
     * @return Settings related to the source of the deployment.
     * 
     */
    public Optional<Output<DeploymentSettingsSourceContextArgs>> sourceContext() {
        return Optional.ofNullable(this.sourceContext);
    }

    private StackDeploymentSettingsArgs() {}

    private StackDeploymentSettingsArgs(StackDeploymentSettingsArgs $) {
        this.executorContext = $.executorContext;
        this.github = $.github;
        this.operationContext = $.operationContext;
        this.sourceContext = $.sourceContext;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(StackDeploymentSettingsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private StackDeploymentSettingsArgs $;

        public Builder() {
            $ = new StackDeploymentSettingsArgs();
        }

        public Builder(StackDeploymentSettingsArgs defaults) {
            $ = new StackDeploymentSettingsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param executorContext Settings related to the deployment executor.
         * 
         * @return builder
         * 
         */
        public Builder executorContext(@Nullable Output<DeploymentSettingsExecutorContextArgs> executorContext) {
            $.executorContext = executorContext;
            return this;
        }

        /**
         * @param executorContext Settings related to the deployment executor.
         * 
         * @return builder
         * 
         */
        public Builder executorContext(DeploymentSettingsExecutorContextArgs executorContext) {
            return executorContext(Output.of(executorContext));
        }

        /**
         * @param github GitHub settings for the deployment.
         * 
         * @return builder
         * 
         */
        public Builder github(@Nullable Output<DeploymentSettingsGithubArgs> github) {
            $.github = github;
            return this;
        }

        /**
         * @param github GitHub settings for the deployment.
         * 
         * @return builder
         * 
         */
        public Builder github(DeploymentSettingsGithubArgs github) {
            return github(Output.of(github));
        }

        /**
         * @param operationContext Settings related to the Pulumi operation environment during the deployment.
         * 
         * @return builder
         * 
         */
        public Builder operationContext(@Nullable Output<DeploymentSettingsOperationContextArgs> operationContext) {
            $.operationContext = operationContext;
            return this;
        }

        /**
         * @param operationContext Settings related to the Pulumi operation environment during the deployment.
         * 
         * @return builder
         * 
         */
        public Builder operationContext(DeploymentSettingsOperationContextArgs operationContext) {
            return operationContext(Output.of(operationContext));
        }

        /**
         * @param sourceContext Settings related to the source of the deployment.
         * 
         * @return builder
         * 
         */
        public Builder sourceContext(@Nullable Output<DeploymentSettingsSourceContextArgs> sourceContext) {
            $.sourceContext = sourceContext;
            return this;
        }

        /**
         * @param sourceContext Settings related to the source of the deployment.
         * 
         * @return builder
         * 
         */
        public Builder sourceContext(DeploymentSettingsSourceContextArgs sourceContext) {
            return sourceContext(Output.of(sourceContext));
        }

        public StackDeploymentSettingsArgs build() {
            return $;
        }
    }

}
