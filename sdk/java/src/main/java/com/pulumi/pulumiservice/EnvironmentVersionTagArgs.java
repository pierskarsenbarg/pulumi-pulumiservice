// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.pulumiservice;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;


public final class EnvironmentVersionTagArgs extends com.pulumi.resources.ResourceArgs {

    public static final EnvironmentVersionTagArgs Empty = new EnvironmentVersionTagArgs();

    /**
     * Environment name.
     * 
     */
    @Import(name="environment", required=true)
    private Output<String> environment;

    /**
     * @return Environment name.
     * 
     */
    public Output<String> environment() {
        return this.environment;
    }

    /**
     * Organization name.
     * 
     */
    @Import(name="organization", required=true)
    private Output<String> organization;

    /**
     * @return Organization name.
     * 
     */
    public Output<String> organization() {
        return this.organization;
    }

    /**
     * Revision number.
     * 
     */
    @Import(name="revision", required=true)
    private Output<Integer> revision;

    /**
     * @return Revision number.
     * 
     */
    public Output<Integer> revision() {
        return this.revision;
    }

    /**
     * Tag name.
     * 
     */
    @Import(name="tagName", required=true)
    private Output<String> tagName;

    /**
     * @return Tag name.
     * 
     */
    public Output<String> tagName() {
        return this.tagName;
    }

    private EnvironmentVersionTagArgs() {}

    private EnvironmentVersionTagArgs(EnvironmentVersionTagArgs $) {
        this.environment = $.environment;
        this.organization = $.organization;
        this.revision = $.revision;
        this.tagName = $.tagName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EnvironmentVersionTagArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EnvironmentVersionTagArgs $;

        public Builder() {
            $ = new EnvironmentVersionTagArgs();
        }

        public Builder(EnvironmentVersionTagArgs defaults) {
            $ = new EnvironmentVersionTagArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param environment Environment name.
         * 
         * @return builder
         * 
         */
        public Builder environment(Output<String> environment) {
            $.environment = environment;
            return this;
        }

        /**
         * @param environment Environment name.
         * 
         * @return builder
         * 
         */
        public Builder environment(String environment) {
            return environment(Output.of(environment));
        }

        /**
         * @param organization Organization name.
         * 
         * @return builder
         * 
         */
        public Builder organization(Output<String> organization) {
            $.organization = organization;
            return this;
        }

        /**
         * @param organization Organization name.
         * 
         * @return builder
         * 
         */
        public Builder organization(String organization) {
            return organization(Output.of(organization));
        }

        /**
         * @param revision Revision number.
         * 
         * @return builder
         * 
         */
        public Builder revision(Output<Integer> revision) {
            $.revision = revision;
            return this;
        }

        /**
         * @param revision Revision number.
         * 
         * @return builder
         * 
         */
        public Builder revision(Integer revision) {
            return revision(Output.of(revision));
        }

        /**
         * @param tagName Tag name.
         * 
         * @return builder
         * 
         */
        public Builder tagName(Output<String> tagName) {
            $.tagName = tagName;
            return this;
        }

        /**
         * @param tagName Tag name.
         * 
         * @return builder
         * 
         */
        public Builder tagName(String tagName) {
            return tagName(Output.of(tagName));
        }

        public EnvironmentVersionTagArgs build() {
            if ($.environment == null) {
                throw new MissingRequiredPropertyException("EnvironmentVersionTagArgs", "environment");
            }
            if ($.organization == null) {
                throw new MissingRequiredPropertyException("EnvironmentVersionTagArgs", "organization");
            }
            if ($.revision == null) {
                throw new MissingRequiredPropertyException("EnvironmentVersionTagArgs", "revision");
            }
            if ($.tagName == null) {
                throw new MissingRequiredPropertyException("EnvironmentVersionTagArgs", "tagName");
            }
            return $;
        }
    }

}
