// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.pulumiservice.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.pulumiservice.enums.DeploymentStatus;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class DeployResult {
    private String consoleUrl;
    private String id;
    private DeploymentStatus status;
    private Double version;

    private DeployResult() {}
    public String consoleUrl() {
        return this.consoleUrl;
    }
    public String id() {
        return this.id;
    }
    public DeploymentStatus status() {
        return this.status;
    }
    public Double version() {
        return this.version;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DeployResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String consoleUrl;
        private String id;
        private DeploymentStatus status;
        private Double version;
        public Builder() {}
        public Builder(DeployResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.consoleUrl = defaults.consoleUrl;
    	      this.id = defaults.id;
    	      this.status = defaults.status;
    	      this.version = defaults.version;
        }

        @CustomType.Setter
        public Builder consoleUrl(String consoleUrl) {
            this.consoleUrl = Objects.requireNonNull(consoleUrl);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder status(DeploymentStatus status) {
            this.status = Objects.requireNonNull(status);
            return this;
        }
        @CustomType.Setter
        public Builder version(Double version) {
            this.version = Objects.requireNonNull(version);
            return this;
        }
        public DeployResult build() {
            final var o = new DeployResult();
            o.consoleUrl = consoleUrl;
            o.id = id;
            o.status = status;
            o.version = version;
            return o;
        }
    }
}
