// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.PulumiService
{
    [EnumType]
    public readonly struct PulumiOperation : IEquatable<PulumiOperation>
    {
        private readonly string _value;

        private PulumiOperation(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Pulumi `up` operation
        /// </summary>
        public static PulumiOperation Update { get; } = new PulumiOperation("update");
        /// <summary>
        /// Pulumi `preview` operation
        /// </summary>
        public static PulumiOperation Preview { get; } = new PulumiOperation("preview");
        /// <summary>
        /// Pulumi `destroy` operation
        /// </summary>
        public static PulumiOperation Destroy { get; } = new PulumiOperation("destroy");
        /// <summary>
        /// Pulumi `refresh` operation
        /// </summary>
        public static PulumiOperation Refresh { get; } = new PulumiOperation("refresh");

        public static bool operator ==(PulumiOperation left, PulumiOperation right) => left.Equals(right);
        public static bool operator !=(PulumiOperation left, PulumiOperation right) => !left.Equals(right);

        public static explicit operator string(PulumiOperation value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PulumiOperation other && Equals(other);
        public bool Equals(PulumiOperation other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct TeamStackPermissionScope : IEquatable<TeamStackPermissionScope>
    {
        private readonly double _value;

        private TeamStackPermissionScope(double value)
        {
            _value = value;
        }

        /// <summary>
        /// Grants read permissions to stack.
        /// </summary>
        public static TeamStackPermissionScope Read { get; } = new TeamStackPermissionScope(101);
        /// <summary>
        /// Grants edit permissions to stack.
        /// </summary>
        public static TeamStackPermissionScope Edit { get; } = new TeamStackPermissionScope(102);
        /// <summary>
        /// Grants admin permissions to stack.
        /// </summary>
        public static TeamStackPermissionScope Admin { get; } = new TeamStackPermissionScope(103);

        public static bool operator ==(TeamStackPermissionScope left, TeamStackPermissionScope right) => left.Equals(right);
        public static bool operator !=(TeamStackPermissionScope left, TeamStackPermissionScope right) => !left.Equals(right);

        public static explicit operator double(TeamStackPermissionScope value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TeamStackPermissionScope other && Equals(other);
        public bool Equals(TeamStackPermissionScope other) => _value == other._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value.GetHashCode();

        public override string ToString() => _value.ToString();
    }
}
