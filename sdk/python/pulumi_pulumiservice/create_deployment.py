# coding=utf-8
# *** WARNING: this file was generated by pulumigen. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'CreateDeploymentResult',
    'AwaitableCreateDeploymentResult',
    'create_deployment',
    'create_deployment_output',
]

@pulumi.output_type
class CreateDeploymentResult:
    def __init__(__self__, console_url=None, id=None, version=None):
        if console_url and not isinstance(console_url, str):
            raise TypeError("Expected argument 'console_url' to be a str")
        pulumi.set(__self__, "console_url", console_url)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if version and not isinstance(version, float):
            raise TypeError("Expected argument 'version' to be a float")
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="consoleUrl")
    def console_url(self) -> str:
        return pulumi.get(self, "console_url")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def version(self) -> float:
        return pulumi.get(self, "version")


class AwaitableCreateDeploymentResult(CreateDeploymentResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return CreateDeploymentResult(
            console_url=self.console_url,
            id=self.id,
            version=self.version)


def create_deployment(inherit_settings: Optional[bool] = None,
                      operation: Optional[str] = None,
                      organization: Optional[str] = None,
                      project: Optional[str] = None,
                      stack: Optional[str] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableCreateDeploymentResult:
    """
    Creates a deployment on a stack. This is an async operation and will return immediately after the deployment is created, not waiting for the deployment to complete.
    """
    __args__ = dict()
    __args__['inheritSettings'] = inherit_settings
    __args__['operation'] = operation
    __args__['organization'] = organization
    __args__['project'] = project
    __args__['stack'] = stack
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('pulumiservice:index:CreateDeployment', __args__, opts=opts, typ=CreateDeploymentResult).value

    return AwaitableCreateDeploymentResult(
        console_url=__ret__.console_url,
        id=__ret__.id,
        version=__ret__.version)


@_utilities.lift_output_func(create_deployment)
def create_deployment_output(inherit_settings: Optional[pulumi.Input[Optional[bool]]] = None,
                             operation: Optional[pulumi.Input[Optional[str]]] = None,
                             organization: Optional[pulumi.Input[str]] = None,
                             project: Optional[pulumi.Input[str]] = None,
                             stack: Optional[pulumi.Input[str]] = None,
                             opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[CreateDeploymentResult]:
    """
    Creates a deployment on a stack. This is an async operation and will return immediately after the deployment is created, not waiting for the deployment to complete.
    """
    ...
